name: "构建MarkVision可执行文件"

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'

      - name: 自动更新版本号
        id: version
        run: |
          # 获取最新的tag版本号
          $latestTag = git describe --tags --abbrev=0 2>$null
          
          # 如果没有tag，使用v0.0.0作为基础版本
          if (-not $latestTag) {
            $latestTag = "v0.0.0"
          }
          
          # 去掉v前缀
          $currentVersion = $latestTag -replace "^v", ""
          
          # 拆分版本号
          $versionParts = $currentVersion.Split('.')
          $major = [int]$versionParts[0]
          $minor = [int]$versionParts[1]
          $patch = [int]$versionParts[2]
          
          # 递增补丁版本号
          $patch++
          
          # 组合新版本号
          $newVersion = "$major.$minor.$patch"
          Write-Host "新版本号: v$newVersion"
          
          # 更新package.json
          $packageJsonPath = "./package.json"
          $packageJson = Get-Content -Path $packageJsonPath -Raw -Encoding UTF8 | ConvertFrom-Json
          $packageJson.version = $newVersion
          $packageJson | ConvertTo-Json -Depth 100 | Out-File -FilePath $packageJsonPath -Encoding UTF8
          
          # 更新tauri.conf.json
          $tauriConfPath = "./src-tauri/tauri.conf.json"
          $tauriConf = Get-Content -Path $tauriConfPath -Raw -Encoding UTF8 | ConvertFrom-Json
          $tauriConf.package.version = $newVersion
          $tauriConf | ConvertTo-Json -Depth 100 | Out-File -FilePath $tauriConfPath -Encoding UTF8
          
          # 输出新版本号供后续步骤使用
          echo "NEW_VERSION=$newVersion" >> $env:GITHUB_OUTPUT
        shell: pwsh
          
      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          
      - name: 安装依赖
        run: npm ci
        
      - name: 构建前端
        run: npm run build
      
      - name: 构建Tauri应用
        id: build_tauri
        run: |
          # 构建Tauri应用
          npm run tauri build -- --verbose --target x86_64-pc-windows-msvc
          
          # 设置版本和应用名称
          $version = "${{ steps.version.outputs.NEW_VERSION }}"
          $appName = "MarkVision"
          
          # 查找生成的exe文件
          $exePath = Get-ChildItem -Path "src-tauri\target\x86_64-pc-windows-msvc\release\$appName.exe" -ErrorAction SilentlyContinue
          
          if (-not $exePath) {
            $exePath = Get-ChildItem -Path "src-tauri\target\release\$appName.exe" -ErrorAction SilentlyContinue
          }
          
          if (-not $exePath) {
            Write-Host "寻找任何可能的exe文件..."
            $exePath = Get-ChildItem -Path "src-tauri\target" -Recurse -Filter "$appName.exe" | Select-Object -First 1
          }
          
          if (-not $exePath) {
            Write-Host "错误: 无法找到构建产物"
            exit 1
          }
          
          Write-Host "找到可执行文件: $($exePath.FullName)"
          
          # 创建便携版文件名
          $portableExeName = "$appName-v$version-portable.exe"
          
          # 复制并重命名exe文件
          Copy-Item -Path $exePath.FullName -Destination $portableExeName
          Write-Host "已创建便携版: $portableExeName"
          
          # 设置环境变量给后续步骤使用
          echo "PORTABLE_EXE=$portableExeName" >> $env:GITHUB_ENV
          
          # 创建latest.json用于自动更新
          $updateJson = @{
            version = $version
            notes = "MarkVision 版本 $version 更新"
            pub_date = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
            platforms = @{
              "windows-x86_64" = @{
                signature = ""
                url = "https://github.com/li5bo5/MarkVision/releases/download/v$version/$portableExeName"
              }
            }
          }
          
          $updateJson | ConvertTo-Json -Depth 10 | Out-File -FilePath "latest.json" -Encoding utf8
          Write-Host "已创建更新文件: latest.json"
        shell: pwsh
      
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.NEW_VERSION }}
          name: "MarkVision v${{ steps.version.outputs.NEW_VERSION }}"
          body: "MarkVision 便携版 v${{ steps.version.outputs.NEW_VERSION }}"
          draft: false
          prerelease: false
          files: |
            ${{ env.PORTABLE_EXE }}
            latest.json
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 创建新的Git标签
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a v${{ steps.version.outputs.NEW_VERSION }} -m "版本 v${{ steps.version.outputs.NEW_VERSION }}"
          git push origin v${{ steps.version.outputs.NEW_VERSION }}
        shell: pwsh
