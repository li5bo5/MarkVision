name: "构建MarkVision应用"

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'

      - name: 自动更新版本号
        id: version
        run: |
          # 获取最新的tag版本号
          $latestTag = git describe --tags --abbrev=0 2>$null
          
          # 如果没有tag，使用v0.0.0作为基础版本
          if (-not $latestTag) {
            $latestTag = "v0.0.0"
          }
          
          # 去掉v前缀
          $currentVersion = $latestTag -replace "^v", ""
          
          # 拆分版本号
          $versionParts = $currentVersion.Split('.')
          $major = [int]$versionParts[0]
          $minor = [int]$versionParts[1]
          $patch = [int]$versionParts[2]
          
          # 递增补丁版本号
          $patch++
          
          # 组合新版本号
          $newVersion = "$major.$minor.$patch"
          
          # 更新package.json (指定 UTF8 编码，添加错误处理)
          try {
              $packageJsonPath = "./package.json"
              # 检查文件是否存在
              if (-not (Test-Path $packageJsonPath)) {
                  Write-Error "File not found: $packageJsonPath"
                  exit 1
              }
              $packageJsonContent = Get-Content -Path $packageJsonPath -Raw -Encoding UTF8
              $packageJson = $packageJsonContent | ConvertFrom-Json -ErrorAction Stop # 确保解析错误时停止
              $packageJson.version = $newVersion
              $packageJson | ConvertTo-Json -Depth 100 | Out-File -FilePath $packageJsonPath -Encoding UTF8
              Write-Host "Successfully updated package.json"
          } catch {
              Write-Error "Failed to update package.json: $($_.Exception.Message)"
              # 输出原始文件内容以便调试
              Write-Error "Original package.json content: $packageJsonContent"
              exit 1 # Exit immediately on error
          }
          
          # 更新tauri.conf.json (指定 UTF8 编码，添加错误处理)
          try {
              $tauriConfPath = "./src-tauri/tauri.conf.json"
              # 检查文件是否存在
              if (-not (Test-Path $tauriConfPath)) {
                  Write-Error "File not found: $tauriConfPath"
                  exit 1
              }
              $tauriConfContent = Get-Content -Path $tauriConfPath -Raw -Encoding UTF8
              $tauriConf = $tauriConfContent | ConvertFrom-Json -ErrorAction Stop # 确保解析错误时停止
              $tauriConf.package.version = $newVersion
              $tauriConf | ConvertTo-Json -Depth 100 | Out-File -FilePath $tauriConfPath -Encoding UTF8
              Write-Host "Successfully updated tauri.conf.json"
          } catch {
              Write-Error "Failed to update tauri.conf.json: $($_.Exception.Message)"
              # 输出原始文件内容以便调试
              Write-Error "Original tauri.conf.json content: $tauriConfContent"
              exit 1 # Exit immediately on error
          }
          
          # 输出新版本号供后续步骤使用 (保持之前的修复)
          "NEW_VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding UTF8
          echo "新版本号: v$newVersion"
        shell: pwsh
          
      - name: 安装Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          
      - name: 安装依赖 (使用 npm ci)
        run: npm ci
        
      - name: 构建前端
        run: npm run build
        
      # 添加调试步骤 (使用 pwsh)
      - name: 检查Tauri配置和目录结构
        run: |
          echo "--- Tauri Config ---"
          Get-Content -Path src-tauri/tauri.conf.json -Encoding UTF8
          echo "`n--- src-tauri Directory ---"
          Get-ChildItem -Path src-tauri -Recurse | Select-Object FullName
        shell: pwsh
      
      - name: 构建并发布Tauri应用
        id: tauri_build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v${{ steps.version.outputs.NEW_VERSION }}
          releaseName: "MarkVision v${{ steps.version.outputs.NEW_VERSION }}"
          releaseBody: "MarkVision 发布版本，包含可执行文件和安装包。"
          releaseDraft: false
          prerelease: false
          includeUpdaterJson: true
          includeRelease: true
          args: --verbose --target x86_64-pc-windows-msvc

      # 移除查找构建产物 (find-artifacts) 步骤
      # 移除手动上传便携版 (softprops/action-gh-release) 步骤
      # 移除上传安装包 (softprops/action-gh-release) 步骤
      # tauri-apps/tauri-action@v0 配合 includeRelease: true 会自动处理 Release 和附件上传

      # 添加调试步骤：检查构建产物目录 (使用 pwsh) - 可选保留
      - name: 检查构建产物目录 (可选)
        if: always()
        run: |
          $targetDir = "src-tauri/target"
          echo "--- Target Directory Structure ---"
          if (Test-Path $targetDir) {
            Get-ChildItem -Path $targetDir -Recurse | Select-Object FullName
          } else {
            echo "Directory not found: $targetDir"
          }
          
          $releaseDir = "src-tauri/target/release"
          echo "`n--- Release Directory Structure ---"
          if (Test-Path $releaseDir) {
            Get-ChildItem -Path $releaseDir -Recurse | Select-Object FullName
          } else {
            echo "Directory not found: $releaseDir"
          }
        shell: pwsh
          
      # 提交版本号更新 (添加 [skip ci])
      - name: 提交版本号更新
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json src-tauri/tauri.conf.json
          git commit -m "自动更新版本号到 v${{ steps.version.outputs.NEW_VERSION }} [skip ci]"
          git push
        shell: pwsh